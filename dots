#!/bin/bash
# shellcheck disable=SC2015 disable=SC2088 source=/dev/null
set -eou pipefail

export _DOTS_DIR='workspace/personal/dotfiles'
export _DOTS_RAW_URL='https://raw.githubusercontent.com/pedro-pereira-dev/dotfiles/refs/heads/main'
export _DOTS_URL='https://github.com/pedro-pereira-dev/dotfiles.git'
export _GENTOO_RAW_URL='https://raw.githubusercontent.com/pedro-pereira-dev/gentoo-installer/refs/heads/main'
export _HOMEBREW_RAW_URL='https://raw.githubusercontent.com/homebrew/install/refs/heads/main'
# ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

_FILE_TO_LOAD='dots-utils'
_IS_DOTS_UTILS_LOADED=''
_SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# defines reusable constants
_LOCAL_FILE_PATH="$_SCRIPT_DIR/$_FILE_TO_LOAD"
_REMOTE_FILE_URL="$_DOTS_RAW_URL/$_FILE_TO_LOAD"
# sources local file if it exists in the system
if [ -f "$_LOCAL_FILE_PATH" ]; then
  source "$_LOCAL_FILE_PATH"
# sources remote file if it exists in remote dotfiles repository
elif curl -ILfs "$_REMOTE_FILE_URL" >/dev/null; then
  source /dev/stdin <<<"$(curl -Lfs "$_REMOTE_FILE_URL")"
fi
[ -z "$_IS_DOTS_UTILS_LOADED" ] &&
  echo "[E] dots#_ : failed to source '$_FILE_TO_LOAD'" && exit 1

function _main() {
  _CMD='' && [ "$#" -ge 1 ] && _CMD="$1"
  case $_CMD in

  bootstrap) # installs required software and clones remote dotfiles git repository
    # checks required parameter
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo "[E] dots#bootstrap : missing required parameter '--user'" && return 1)
    # checks homebrew installation on macos systems
    test "$(uname)" == 'Darwin' && ! check_command brew &&
      echo '[I] installing homebrew...' &&
      curl -Lfs "$_HOMEBREW_RAW_URL/install.sh" | NONINTERACTIVE=1 run_as_user "$_USER" bash &&
      export PATH="/opt/homebrew/bin:$PATH"
    # checks git installation
    ! check_command git && echo '[I] installing git...' && (
      check_command brew && run_as_user "$_USER" brew install git
      check_command emerge && run_as_root emerge --ask=n --noreplace dev-vcs/git
    )
    # checks local dotfiles git repository directory
    ! test -d "$_HOME/$_DOTS_DIR/.git" && echo '[I] cloning dotfiles...' && (
      run_as_user "$_USER" rm -fr "$_HOME/$_DOTS_DIR"
      run_as_user "$_USER" mkdir -p "$(dirname "$_HOME/$_DOTS_DIR")"
      run_as_user "$_USER" git clone $_DOTS_URL "$_HOME/$_DOTS_DIR"
    )
    return 0
    ;;
    # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

  install) # prepares live iso system and installs gentoo using custom script
    # checks required parameter
    _HOST="$(get_host "$@")" ||
      (echo "[E] dots#install : missing required parameter '--host'" && return 1)
    _PASSWORD="$(get_option "--password" "$@")" ||
      (echo "[E] dots#install : missing required parameter '--password'" && return 1)
    ! is_root &&
      echo '[E] dots#install : missing required permissions' && return 1
    # sources target system configuration
    echo "[I] sourcing '$_HOST' configuration..."
    _FILE_TO_LOAD="hosts.d/$_HOST.d/dots-configuration.conf"
    source_file "$_FILE_TO_LOAD" ||
      (echo "[E] dots#install : failed to source '$_HOST' configuration" && return 1)
    # installs gento to target system
    echo "[I] installing gentoo to '$_HOST'..."
    _FILE_TO_LOAD='dots-gentoo-installer'
    source_file "$_FILE_TO_LOAD" ||
      (echo "[E] dots#install : failed to install gentoo to '$_HOST'" && return 1)
    return 0
    ;;
    # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

  update) # resets dotfiles git repository and updates its head
    # checks required parameter
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo "[E] dots#update : missing required parameter '--user'" && return 1)
    # updates and resets local dotfiles git repository
    _main bootstrap && (
      echo '[I] updating dotfiles...'
      cd "$_HOME/$_DOTS_DIR"
      run_as_user "$_USER" git fetch origin
      run_as_user "$_USER" git reset --hard origin/main
      run_as_user "$_USER" git clean -dfqx
    )
    return 0
    ;;
    # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

  sync) # merges dotfiles settings into the system
    # checks required parameter
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo "[E] dots#sync : missing required parameter '--user'" && return 1)
    _HOST="$(get_host "$@")" ||
      (echo "[E] dots#sync : missing required parameter '--host'" && return 1)
    # sources target system configuration
    echo "[I] sourcing '$_HOST' configuration..."
    _LAYERS=() && _FILE_TO_LOAD="hosts.d/$_HOST.d/dots-configuration.conf"
    source_file "$_FILE_TO_LOAD" ||
      (echo "[E] dots#sync : failed to source '$_HOST' configuration" && return 1)
    # sets up layer
    echo "[I] setting up layers on '$_HOST'..."
    for _LAYER in "${_LAYERS[@]}"; do
      _FILE_TO_LOAD="$_LAYER/dots-sync.sh"
      echo "[I] setting up layer '$_FILE_TO_LOAD'..."
      source_file "$_FILE_TO_LOAD" 'setup' || true
    done
    # clears empty directories and stale links
    ! get_option '--skip-cleaning' "$@" && (
      is_root && (
        echo "[I] cleaning empty directories and stale links from '/'..."
        run_as_root clean_directories_and_links '/' ||
          (echo "[E] dots#sync : failed to clean directories and links from '/'" && return 1)
      ) || (
        echo "[I] cleaning empty directories and stale links from '$_HOME'..."
        run_as_user "$_USER" clean_directories_and_links "$_HOME" ||
          (echo "[E] dots#sync : failed to clean directories and links from '$_HOME'" && return 1)
      )
    )
    # configures layer
    echo "[I] configuring layers on '$_HOST'..."
    for _LAYER in "${_LAYERS[@]}"; do
      _FILE_TO_LOAD="$_LAYER/dots-sync.sh"
      echo "[I] configuring layer '$_FILE_TO_LOAD'..."
      source_file "$_FILE_TO_LOAD" 'configure' || true
    done
    return 0
    ;;
    # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

  *) usage && return 1 ;; # handles unknown commands
  esac
}
_main "$@"
