#!/bin/sh
# shellcheck disable=SC2015 source=/dev/null
set -eou pipefail

export _DOTS_DIR='workspace/personal/dotfiles'
export _DOTS_RAW_URL='https://raw.githubusercontent.com/pedro-pereira-dev/dotfiles/refs/heads/main'
# export _GIT_CRYPT_KEY='.gitcryptkey'

_FILE_TO_SOURCE='dots.d/utils.sh'
_SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
_IS_DOTS_UTILS_LOADED=''

echo "vai sourcar isto: $_SCRIPT_DIR/$_FILE_TO_SOURCE"

if [ -f "$_SCRIPT_DIR/$_FILE_TO_SOURCE" ]; then
  . "$_SCRIPT_DIR/$_FILE_TO_SOURCE"
elif curl -ILfs "$_DOTS_RAW_URL/$_FILE_TO_SOURCE" >/dev/null; then
  _TMP_FILE=$(mktemp)
  curl -Lfs "$_DOTS_RAW_URL/$_FILE_TO_SOURCE" >"$_TMP_FILE"
  . "$_TMP_FILE" && rm "$_TMP_FILE"
fi
[ -z "$_IS_DOTS_UTILS_LOADED" ] &&
  echo "[E] dots#_ : failed to source '$_FILE_TO_SOURCE'" && exit 1

_main() {
  _CMD='' && [ "$#" -ge 1 ] && _CMD="$1"
  case $_CMD in

  # installs required software and clones remote dotfiles git repository
  bootstrap)
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo "[E] dots#bootstrap : missing required parameter '--user'" && return 1)
    is_macos && ! check_command brew &&
      run_as_user "$_USER" install_homebrew && export PATH="/opt/homebrew/bin:$PATH"
    ! check_command git && install_git "$_USER"
    [ ! -d "$_HOME/$_DOTS_DIR/.git" ] && (
      run_as_user "$_USER" mkdir -p "$(dirname "$_HOME/$_DOTS_DIR")"
      run_as_user "$_USER" rm -fr "$_HOME/$_DOTS_DIR"
      run_as_user "$_USER" git clone 'https://github.com/pedro-pereira-dev/dotfiles.git' "$_HOME/$_DOTS_DIR"
    )
    return 0
    ;;

  # prepares live iso system and installs gentoo using custom script
  install)
    _HOSTNAME="$(get_hostname "$@")" ||
      (echo "[E] dots#install : missing required parameter '--hostname'" && return 1)
    _PASSWORD="$(get_option '--password' "$@")" ||
      (echo "[E] dots#install : missing required parameter '--password'" && return 1)
    ! is_root &&
      echo '[E] dots#install : missing required permissions' && return 1
    source_file "host-$_HOSTNAME.d/system.conf" ||
      (echo "[E] dots#install : failed to source '$_HOSTNAME' configuration" && return 1)
    source_file 'dots.d/install-gentoo.sh' ||
      (echo "[E] dots#install : failed to install gentoo to '$_HOSTNAME'" && return 1)
    return 0
    ;;

  # resets dotfiles git repository and updates its head
  update)
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo "[E] dots#update : missing required parameter '--user'" && return 1)
    _main bootstrap "$@" && (
      run_as_user "$_USER" git -C "$_HOME/$_DOTS_DIR" fetch origin
      run_as_user "$_USER" git -C "$_HOME/$_DOTS_DIR" reset --hard origin/main
      run_as_user "$_USER" git -C "$_HOME/$_DOTS_DIR" clean -dfqx
    )
    return 0
    ;;

  # # handles dotfiles secrets
  # secrets)
  #   _CMD='' && [ "$#" -ge 2 ] && _CMD="$2"
  #   case $_CMD in
  #
  #   # generates different types of secrets
  #   generate)
  #     _CMD='' && [ "$#" -ge 3 ] && _CMD="$3"
  #     case $_CMD in
  #
  #     # generates alphanumeric and special characters passwords
  #     password)
  #       _KEY_LENGTH="$(get_option '--length' "$@")" || _KEY_LENGTH=''
  #       [ -z "$_KEY_LENGTH" ] && _KEY_LENGTH='64'
  #       openssl rand -base64 "$((_KEY_LENGTH * 3 / 4))" | tr -d '\n'
  #       ;;
  #
  #     *) usage && return 1 ;;
  #     esac
  #     ;;
  #
  #   # exports and encrypts git-crypt symmetric key file
  #   export)
  #     echo '[I] exporting git-crypt key...'
  #     _LOCAL_DOTS_DIR="$(dirname "$(readlink -f "$0")")"
  #     git-crypt export-key "$_LOCAL_DOTS_DIR/$_GIT_CRYPT_KEY"
  #     echo '[I] encrypting git-crypt key...'
  #     _PASSPHRASE="$(_main secrets generate password --length 128)"
  #     echo "$_PASSPHRASE" | gpg --cipher-algo AES256 \
  #       -o "$_LOCAL_DOTS_DIR/$_GIT_CRYPT_KEY.enc" \
  #       --passphrase-fd 0 --pinentry-mode loopback --symmetric \
  #       "$_LOCAL_DOTS_DIR/$_GIT_CRYPT_KEY"
  #     echo '[W] git-crypt key passphrase:'
  #     echo "$_PASSPHRASE"
  #     ;;
  #
  #   # decrypts git-crypt key file and unlocks repository
  #   unlock)
  #     echo '[I] decrypting git-crypt key...'
  #     _LOCAL_DOTS_DIR="$(dirname "$(readlink -f "$0")")"
  #     gpg -o "$_LOCAL_DOTS_DIR/$_GIT_CRYPT_KEY" \
  #       --pinentry-mode loopback \
  #       -d "$_LOCAL_DOTS_DIR/$_GIT_CRYPT_KEY.enc"
  #     echo '[I] unlocking git-crypt key...'
  #     git-crypt unlock "$_LOCAL_DOTS_DIR/$_GIT_CRYPT_KEY"
  #     ;;
  #
  #   *) usage && return 1 ;;
  #   esac
  #   ;;
  # # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

  # configures dotfiles in the system
  sync)
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo "[E] dots#sync : missing required parameter '--user'" && return 1)
    _HOSTNAME="$(get_hostname "$@")" ||
      (echo "[E] dots#sync : missing required parameter '--hostname'" && return 1)
    [ ! -d "$_HOME/$_DOTS_DIR/.git" ] && _main bootstrap "$@"
    source_file "host-$_HOSTNAME.d/$_HOSTNAME.sh" ||
      (echo "[E] dots#sync : failed to source '$_HOSTNAME' configuration" && return 1)
    configure "$@"
    get_option '--full' "$@" && run_as_root remove_broken_links || true
    return 0
    ;;

  *) echo '[E] dots#_main : undefined command' && return 1 ;;
  esac
}
_main "$@"
