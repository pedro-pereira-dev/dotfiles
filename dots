#!/bin/bash
# shellcheck disable=SC2015 disable=SC2088 source=/dev/null
set -eou pipefail

export _DOTS_DIR='workspace/personal/dotfiles'
export _DOTS_RAW_URL='https://raw.githubusercontent.com/pedro-pereira-dev/dotfiles/refs/heads/main'
export _DOTS_URL='https://github.com/pedro-pereira-dev/dotfiles.git'
export _GENTOO_RAW_URL='https://raw.githubusercontent.com/pedro-pereira-dev/gentoo-installer/refs/heads/main'
export _HOMEBREW_URL='https://raw.githubusercontent.com/homebrew/install/refs/heads/main'

# ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
# sources auxiliary functions
_IS_DOTS_UTILS_LOADED=""
source "$(dirname "$(readlink -f "$0")")/dots-utils" >/dev/null 2>&1 ||
  source /dev/stdin <<<"$(curl -Lfs "$_DOTS_RAW_URL/dots-utils")"
[ -z "$_IS_DOTS_UTILS_LOADED" ] && echo '[E] failed to source dots-utils' && exit 1

function _main() {
  _CMD='' && [ "$#" -ge 1 ] && _CMD="$1"
  case $_CMD in

  # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  # installs required software and clones dotfiles git repository
  bootstrap)
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo '[E] missing required argument: --user' && return 1)
    test "$(uname)" == 'Darwin' && ! check_command brew &&
      echo '[I] installing homebrew...' &&
      curl -Lfs "$_HOMEBREW_URL/install.sh" | NONINTERACTIVE=1 run_as_user "$_USER" bash &&
      export PATH="/opt/homebrew/bin:$PATH"
    ! check_command git && echo '[I] installing git...' && (
      check_command brew && run_as_user "$_USER" brew install git
      check_command emerge && ! check_command git && run_as_root emerge --ask=n --noreplace dev-vcs/git
    )
    ! test -d "$_HOME/$_DOTS_DIR/.git" && echo '[I] cloning dotfiles...' && (
      run_as_user "$_USER" rm -fr "$_HOME/$_DOTS_DIR"
      run_as_user "$_USER" mkdir -p "$(dirname "$_HOME/$_DOTS_DIR")"
      run_as_user "$_USER" git clone $_DOTS_URL "$_HOME/$_DOTS_DIR"
    )
    return 0
    ;;

  # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  # prepares live iso system and installs gentoo using custom script
  install)
    _HOST="$(get_host "$@")" ||
      (echo '[E] missing required argument: --host' && return 1)
    _PASSWORD="$(get_option "--password" "$@")" ||
      (echo '[E] missing required argument: --password' && return 1)
    ! is_root && echo '[E] missing required permissions' && return 1
    export _PASSWORD
    echo '[I] installing gentoo...' && run_script "hosts.d/$_HOST" "$@" ||
      (echo "[E] failed to install gentoo to ($_HOST)" && return 1)
    return 0
    ;;

  # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  # resets dotfiles git repository and updates its head
  update)
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo '[E] missing required argument: --user' && return 1)
    _main bootstrap && (
      echo '[I] updating dotfiles...'
      cd "$_HOME/$_DOTS_DIR"
      run_as_user "$_USER" git fetch origin
      run_as_user "$_USER" git reset --hard origin/main
      run_as_user "$_USER" git clean -dfqx
    )
    return 0
    ;;

  # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  # clears deprecated directories and links after resetting them
  sync)
    _HOME="$(get_home "$@")" && _USER="$(get_user "$@")" ||
      (echo '[E] missing required argument: --user' && return 1)
    _HOST="$(get_host "$@")" ||
      (echo '[E] missing required argument: --host' && return 1)
    echo '[I] syncing dotfiles...' && run_script "hosts.d/$_HOST" "$@" ||
      (echo "[E] failed to sync to ($_HOST)" && return 1)
    return 0
    ;;

  # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  # handles unknown commands
  *) usage && return 1 ;;
  esac
}
_main "$@"
